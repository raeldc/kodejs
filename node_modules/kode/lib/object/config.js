defineObject('lib:object.config',
{
    init: function(config)
    {
        if (!(config instanceof Object)) throw new TypeError('Config must be an Object');

        this.__data = {};

        // Setter/Getter for the main keys in data
        for (var key in config) {
            // Do not add methods
            if (typeof config[key] !== 'function') {
                // Add property setter or getter
                this.add(key, config[key]);
            }
        }
    },

    registerProperty: function(key)
    {
        var prop    = {};
        prop[key] = {};

        prop[key].get = function() {
           return this.get(key);
        };

        prop[key].set = function(value) {
            return this.set(key , value);
        };

        Object.defineProperties(this, prop);
    },

    get: function(key)
    {
        var result = this.__data[key];

        if(result === undefined){
            result = false;
        }

        return result;
    },

    set: function(key, value)
    {
        if (value instanceof Object) {
            value = getObject('lib:object.config', value)
        }

        this.__data[key] = value;
        return this.__data[key];
    },

    has: function(key)
    {
        return this.__data[key] !== undefined;
    },

    remove: function(key)
    {
        delete this.__data[key];
        return this;
    },

    add: function(key, value)
    {
        this.registerProperty(key);
        this.set(key, value);
    },

    append: function(data)
    {
        if (data instanceof Object) {
            for (var key in data) {
                // Do not add methods and don't add if it already exists
                if (typeof data[key] !== 'function' && this.__data[key] === undefined) {
                    // Add property setter or getter
                    this.add(key, data[key]);
                }
            }
        }

        return this;
    },

    getData: function()
    {
        return this.__data;
    }
});
