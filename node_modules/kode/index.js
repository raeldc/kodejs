// Execute this script only once
if (typeof kode !== 'undefined') return;

var util = require('util');

var Kode = function()
{
    this.objectRegistry = [];
}

Kode.prototype.getObject = function(identifier, config)
{
    var objectConfig = config || {};
    var object       = this.objectRegistry[identifier];

    if (object !== undefined) {
        return new object.CLASS(objectConfig);
    }

    return {};
}

Kode.prototype.defineObject = function(identifier, parents, definition)
{
    if (identifier !== undefined && this.objectRegistry[identifier] === undefined) {
        var object = {
            CLASS     : function() {
                this.constructor.apply(this, arguments);
            }
        };

        if (typeof definition === 'undefined') {
            definition = {};
        };

        // If parents is not an object
        if (!(parents instanceof Object)) {
            if (typeof parents == 'string') {
                parents = [parents];
            }

            if (!(parents instanceof Array) && parents.length === 0){
                throw new TypeError('Invalid Argument: parents');
            }

            var parentIdentifier = parents.shift();

            if (typeof parentIdentifier !== 'string') {
                throw new TypeError('Invalid Identifier: parent is a type of ' + typeof parentIdentifier);
            }

            if (this.objectRegistry[parentIdentifier] === undefined) {
                throw new ReferenceError('Object is not defined: ' + parentIdentifier);
            }

            parent = this.objectRegistry[parentIdentifier];
        }
        // If parents is an object it means it's a definition
        else {
            definition = parents;
            // Parent is a base Object
            parent     = {
                CLASS     : Object,
                definition: {}
            }
        }

        // Default constructor function
        object.CLASS.prototype.constructor = function(){};

        if (definition instanceof Object) {
            // Copy the definition into the prototype
            for (var method in definition) {
                // If method exists both in definition and parent
                if (typeof definition[method] === 'function' && typeof parent.definition[method] === 'function') {
                    // Create a wrapper function that binds the `parentMethod` to `this`
                    object.CLASS.prototype[method] = (function(childMethod, parentMethod){
                        return function(){
                            this.parentMethod = parentMethod;
                            var result = childMethod.apply(this, arguments);
                            this.parentMethod = undefined;
                            return result;
                        }
                    })(definition[method], parent.definition[method]);
                    continue;
                }

                // If method exists only in the definition
                if (typeof definition[method] === 'function') {
                    object.CLASS.prototype[method] = definition[method];
                    continue;
                }
            }

            // Copy the parent prototype into the object prototype
            for (var method in parent.definition) {
                // If method doesn't exist yet in the object and if the prototype method is a function
                if (typeof object.CLASS.prototype[method] === 'undefined' && typeof parent.definition[method] === 'function') {
                    object.CLASS.prototype[method] = parent.definition[method];
                }
            }
        }

        // These can't be overriden by the definition
        object.definition                 = object.CLASS.prototype;
        object.CLASS.prototype.parent     = parent.CLASS;
        object.CLASS.prototype.identifier = identifier;

        this.objectRegistry[identifier] = object;

        return this.objectRegistry[identifier];
    }
}

GLOBAL.kode         = new Kode();
GLOBAL.getObject    = GLOBAL.kode.getObject.bind(GLOBAL.kode);
GLOBAL.defineObject = GLOBAL.kode.defineObject.bind(GLOBAL.kode);